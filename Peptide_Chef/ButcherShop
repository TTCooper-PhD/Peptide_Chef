### Data Handling
import numpy as np
import pandas as pd
from pandas import ExcelWriter
import re
import itertools as it
from collections import deque
from itertools import combinations
from urllib.request import urlretrieve
import gzip
from functools import lru_cache
import json




class ButcherShop ():

    def __init__(self):
        self.missed=0
        self.min_len=6
        self.max_len=100
        self.enzyme="trypsin"
        self.rules = { 'arg-c':         r'R',
        'asp-n':         r'\w(?=D)',
        'bnps-skatole' : r'W',
        'caspase 1':     r'(?<=[FWYL]\w[HAT])D(?=[^PEDQKR])',
        'caspase 2':     r'(?<=DVA)D(?=[^PEDQKR])',
        'caspase 3':     r'(?<=DMQ)D(?=[^PEDQKR])',
        'caspase 4':     r'(?<=LEV)D(?=[^PEDQKR])',
        'caspase 5':     r'(?<=[LW]EH)D',
        'caspase 6':     r'(?<=VE[HI])D(?=[^PEDQKR])',
        'caspase 7':     r'(?<=DEV)D(?=[^PEDQKR])',
        'caspase 8':     r'(?<=[IL]ET)D(?=[^PEDQKR])',
        'caspase 9':     r'(?<=LEH)D',
        'caspase 10':    r'(?<=IEA)D',
        'chymotrypsin high specificity' : r'([FY](?=[^P]))|(W(?=[^MP]))',
        'chymotrypsin low specificity':
            r'([FLY](?=[^P]))|(W(?=[^MP]))|(M(?=[^PY]))|(H(?=[^DMPW]))',
        'clostripain':   r'R',
        'cnbr':          r'M',
        'enterokinase':  r'(?<=[DE]{3})K',
        'factor xa':     r'(?<=[AFGILTVM][DE]G)R',
        'formic acid':   r'D',
        'glutamyl endopeptidase': r'E',
        'granzyme b':    r'(?<=IEP)D',
        'hydroxylamine': r'N(?=G)',
        'iodosobenzoic acid': r'W',
        'lysc':          r'K',
        'ntcb':          r'\w(?=C)',
        'pepsin ph1.3':  r'((?<=[^HKR][^P])[^R](?=[FL][^P]))|'
                        r'((?<=[^HKR][^P])[FL](?=\w[^P]))',
        'pepsin ph2.0':  r'((?<=[^HKR][^P])[^R](?=[FLWY][^P]))|'
                        r'((?<=[^HKR][^P])[FLWY](?=\w[^P]))',
        'proline endopeptidase': r'(?<=[HKR])P(?=[^P])',
        'proteinase k':  r'[AEFILTVWY]',
        'staphylococcal peptidase i': r'(?<=[^E])E',
        'thermolysin':   r'[^DE](?=[AFILMV])',
        'thrombin':      r'((?<=G)R(?=G))|'
                        r'((?<=[AFGILTVM][AFGILTVWA]P)R(?=[^DE][^DE]))',
        'trypsin':       r'([KR](?=[^P]))|((?<=W)K(?=P))|((?<=M)R(?=P))',
        'trypsin_exception': r'((?<=[CD])K(?=D))|((?<=C)K(?=[HY]))|((?<=C)R(?=K))|((?<=R)R(?=[HR]))'}

    def Update_rules(self,new_enzyme=None,new_rule=None):
        self.rules[new_enzyme]=new_rule
        return rules

    # Use to proudce peptides from given sequence
    def Cleaver(self,sequence, rule, rule_regex=None, exception=None):
        peptides = []
        if rule in self.rules:
            rule = self.rules[rule]
        else:
            raise ValueError("Enzyme & Rule Unknown, Please run ButcherShop.Update_rules prior to running ButcherShop.Cleaver")
        exception = self.rules.get(exception, exception)
        ml = self.missed + 2
        trange = range(ml) #returns range of 0 to ml-1
        cleavage_sites = deque([0], maxlen=ml) # returns positions of cleavage sites between each other. 
        if self.min_len is None:
            min_length = 1
        cl = 1
        if exception is not None: #locates postion of c-terminal by-product of cleavage. 
            exceptions = {x.end() for x in re.finditer(exception, sequence)}
        for i in it.chain([x.end() for x in re.finditer(rule, sequence)],
                    [None]):
            if exception is not None and i in exceptions:
                continue
            cleavage_sites.append(i)
    #         print(cleavage_sites)
            if cl < ml:
                cl += 1
            for j in trange[:cl - 1]:
                seq = sequence[cleavage_sites[j]:cleavage_sites[-1]]
                if (len(seq) >= self.min_len):
                    if (len(seq) <= self.max_len):
                        peptides.append(seq)
        return peptides

    #Use to clean up peptides sheets (i.e. protein-peptide.xlsx)
    def Butcher(self,df,ident1=None,ident2=None,ident3="Pass",t_id=None,t_value=0,acid=["J","Z"],labels=list()):
        tag=df[labels]
        raw= df.filter(like=str(ident1), axis=1)
        raw = pd.concat([raw, tag], axis=1)
        raw["Peptide"]= raw["Peptide"].str.replace('\W+|\d+',"")
        raw["Peptide"]= raw["Peptide"].apply(lambda x : x[1:-1])
        cuts = raw.filter(like=str(ident2), axis=1)
        if ident3 != "Pass":
            cuts = raw.filter(like=str(ident3), axis=1)
            cuts = pd.concat([cuts,tag], axis=1)
            cuts=cuts.fillna(0)
            blade=cuts.filter(regex=t_id, axis='columns')
            trim=blade==t_value
            trimmings=trim.all(axis=1)
            cuts=cuts.loc[~trimmings,:]
            cuts.reset_index(inplace=True)
            cuts.drop('index', axis=1, inplace=True)
            return raw, cuts, blade
        else:    
            cuts = pd.concat([cuts,tag], axis=1)
            cuts=cuts.fillna(0)
            blade=cuts.filter(regex=t_id, axis='columns')
            trim=blade==t_value
            trimmings=trim.all(axis=1)
            cuts=cuts.loc[~trimmings,:]
            cuts.reset_index(inplace=True)
            cuts.drop('index', axis=1, inplace=True)
            return raw, cuts, blade


    # Use to generate artifical dataset
    def Sampler (self,df,target="Peptide",identifier="Gene",rule=self.enzyme, min_length=7,exception=None,max_length=100, pH=2.0, min_charge=2.0,missed=0):
        pep_dict = {}
        pep_dict_list = []
        print(f'You order is being processed and the butcher is preparing your {rule}-cut protein(s)!')
        print("The butcher is working...")
        raw=df[[target, identifier]].set_index(identifier).to_dict()[target]
        print(f"Generating {rule}-cut peptides based on {missed}-missed cleavages. ")
        for gene,peptide in raw.items():
            pep_dict[gene] = self.Cleaver(peptide,rule=rule,min_length=self.min_len,exception=exception,missed_cleavages=self.missed, max_length=self.max_len)
        for k, lst in pep_dict.items():    
            cuts=len(lst)
            for i in range(cuts):
                d = {}
                d.update({k: lst[i]})
                d.update({'gene':k})
                d.update({'aa_comp': dict(parser.amino_acid_composition(lst[i]))})
                d.update({'peptide': lst[i]})
                d.update({'Length': len(lst[i])})
                d.update({'z': float(round(electrochem.charge(lst[i], pH=pH),3))})
                d.update({'Mass': float(Scales.Mass(lst[i]))})
                if d["z"] > 0:
                    d.update({'m/z': d["Mass"]/d['z']})
                pep_dict_list.append(d)
        print("Preparing your order...")
        pep_dict_list = [peptide for peptide in pep_dict_list if peptide['z'] >= float(min_charge)]
        print(f'Order is up! You have acquired {len(pep_dict_list)} peptides that are between {min_length} and {max_length} amino acids!')
        return pep_dict_list

    def Deli(z,meat_package=False):
        #z = list of dictionaries, keys must be equal thus will drop keys which are not cosistent between dictionaries
        # use after ButcherShop
        #returns dataframe
        key_intersect = set(z[0].keys()).intersection(set(z[1].keys()))
        zz = [{key:value for (key,value) in dicts.items() if key in key_intersect} for dicts in z]
        ham = pd.DataFrame(zz)
        if meat_package == True:
            ham_counts=ham.groupby('gene').size().reset_index(name='counts')
            ham=ham.merge(ham_counts,how='left', on=['gene'])
    #     ham.drop(ham.columns[0],axis=1,inplace=True)
        columns=ham.columns.tolist()
        r = re.compile("^[pP]")
        P = list(filter(r.match, columns)) 
        peptide =str(P[0])
        ham[peptide]=ham[peptide].apply(",".join) # convert list within df to string
        return ham

    def Marinate (df,target,length,IPC=False,Hydro=False,GRAVY=False,NeutralZ=False,Peptide_Inspector=False):
        print("Marinating peptides...")
        if IPC is True:
            df["IPC"]=df[target].apply(Scales.Peptide_IPC)
            print("IPC calculated!")
        if GRAVY is True:
            df["Hydro_Sum"]=df[target].apply(Scales.Peptide_GRAVY)
            print("Its all GRAVY Baby!")
        if NeutralZ is True:
            df["Neutral_Z"]=df[target].apply(Scales.Peptide_Neutral_pH)
            print("Charge at Neutral pH added!")
        print("Peptides have been marinated!")
        return df